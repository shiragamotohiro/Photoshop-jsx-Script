//// 目的 : 指定ディレクトリ配下の全jpeg画像をL版写真プリント用フチあり画像に一括変換します// 作成者 : Motohiro Shiraga// 履歴 : 2016/02/7 初版// 動作環境 : Adobe Photoshop CC 2015// 使用方法：// 1. Adobe Photoshop CCを起動します// 2. Adobe Photoshop CCで開いているファイルがある場合、すべて閉じてください// 3. [ファイル] -> [スクリプト] -> [参照...] をクリックし、本スクリプトファイルを指定して[開く]をクリックします// 4. 変換したい画像のあるディレクトリを指定します// 5. 変換した画像を保存するディレクトリを指定します// 6. 解像度を指定します。通常はデフォルト値の350dpiで問題ありません。// 7. フチの色を選択します。白か黒が選択できます。// 8. 処理終了するまでお待ちください。//// 画像解像度定義var d_resolution = 350;var max_resolution = 600;var min_resolution = 250;// Photoshopのルーラー単位をmmに設定app.preferences.rulerUnits = Units.MMtry {    // photoshopで現在開いている画像があれば、すべてクローズする    if ( app.documents.length > 0 )    {        if ( confirm( 'Photoshopで開いているすべての画像を保存せず閉じてもよいですか?' ) )        {            while (app.documents.length)             {                app.activeDocument.close()            }        }        else        {            var e = new Error( 'すべての画像を閉じたのち、再実行してください' )            throw e;        }    }    // 入力ディレクトリを指定してもらう    var InputDir = Folder.selectDialog("処理対象画像のあるディレクトリを選択してください")    if ( InputDir == null )    {        var e = new Error( 'ディレクトリが選択されなかったため処理終了します' )        throw e;    }    // 入力ディレクトリ内の拡張子がjpgまたはjpegのファイルリストを作成    var JpgFileList = InputDir.getFiles("*.jp*g")        // 入力ディレクトリ内の画像ファイル数チェック    if ( JpgFileList.length == 0 )    {        var e = new Error( '指定ディレクトリにはjpegファイルがありません' )        throw e;    }    // 出力ディレクトリを指定してもらう    var OutputDir = Folder.selectDialog("保存先ディレクトリを選択してください")    if ( OutputDir == null )    {        var e = new Error( 'ディレクトリが選択されなかったため処理終了します' )        throw e;    }    // 解像度を入力してもらう    while ( true )    {        var resolution = prompt( '解像度(dpi)を入力してください(' + min_resolution + 'から' + max_resolution + 'までの間の数値)', d_resolution )        if ( resolution < min_resolution || max_resolution < resolution )        {            if ( resolution == null )            {                var e = new Error( '処理を中止します' )                throw e;            }            alert( '解像度は' + min_resolution + 'から' + max_resolution + 'の間の数値を入力してください' )            continue;        }        break;    }    // alert( 'resolution=' + resolution )    // 基準解像度を設定    UnitValue.baseUnit = UnitValue (1/resolution, "in")    // alert( 'UnitValue.baseUnit =' + UnitValue.baseUnit )    // 背景色を決定    var rgbColor = new RGBColor;    var answer = confirm( 'フチの色は白色でよいですか？ はい：白色 いいえ：黒色' );    if ( answer == true )    {        var colorofbackgroud = "white"        rgbColor.blue = 255        rgbColor.green = 255        rgbColor.red = 255    }    else    {        var colorofbackgroud = "black"            rgbColor.blue = 0        rgbColor.green = 0        rgbColor.red = 0    }    // Photoshopの標準の背景色を設定    var solidColor = new SolidColor;    solidColor.rgb = rgbColor    app.backgroundColor = solidColor    // 入力ディレクトリ内のjpegファイル分ループ    for ( var i = 0; i < JpgFileList.length; i++ )    {        if ( JpgFileList[i] instanceof File == false)        {            continue;        }        // jepgファイルをオープン        var wkJpgDocObj=app.open(JpgFileList[i])        // ファイル名を取得        var wkFileName1=activeDocument.name        // ファイル名をドットで分割して各要素に格納した配列を取得        var wkFileName2=wkFileName1.split(".",10)        // 幅を取得        var width = app.activeDocument.width.value        // 高さを取得        var height = app.activeDocument.height.value        // 画像の幅と高さの比を取得        var ratio = getImageRatio( width, height )        // サポートする画像の幅と高さの比は2:3or3:4or3:2or4:3        if ( ratio < 23 )        {            app.activeDocument.close( SaveOptions.DONOTSAVECHANGES )            var e = new Error( '画像の幅と高さの比がサポート外です' )            throw e;        }        // 幅：高さ＝２：３の場合は画像を左90度に回転        if ( ratio == 23 )        {            app.activeDocument.rotateCanvas(-90)            ratio = 32        }        // 幅：高さ＝３：４の場合は画像を左90度に回転        if ( ratio == 34 )        {            app.activeDocument.rotateCanvas(-90)            ratio = 43        }        var wksize = new Array;        getImageSize( ratio, wksize )        // 解像度チェック        // alert( (app.activeDocument.resolution/resolution) * app.activeDocument.width )        if ( (app.activeDocument.resolution/resolution) * app.activeDocument.width < wksize[2] || (app.activeDocument.resolution/resolution) * app.activeDocument.height < wksize[3] )        {            app.activeDocument.close( SaveOptions.DONOTSAVECHANGES )            var e = new Error( '解像度が足りません' )            throw e;        }        // 元画像をリサイズ        app.activeDocument.resizeImage( wksize[2], wksize[3], resolution )        // 現レイヤーをクリップボードにコピー        app.activeDocument.activeLayer.copy()        // 元画像ファイルを閉じておく        app.activeDocument.close( SaveOptions.DONOTSAVECHANGES )        // 新規画像を作成        var wkPBDocObj1 = app.documents.add( wksize[0], wksize[1], resolution, "work", NewDocumentMode.RGB, DocumentFill.BACKGROUNDCOLOR )        app.activeDocument = wkPBDocObj1        // 画像貼り付け範囲を選択        var x = new Array;        var y = new Array;        getSelectOffset( ratio, x, y )        selRegion = [ [ x[1], y[1] ], [ x[2], y[1] ], [ x[2], y[2] ], [ x[1], y[2] ] ]        app.activeDocument.selection.select(selRegion)        // クリップボードの画像をペースト        app.activeDocument.paste()        // レイヤーを統合        app.activeDocument.activeLayer.merge()        // 保存オプションを設定        jpgSaveOptions = new JPEGSaveOptions()        jpgSaveOptions.embedColorProfile = true        jpgSaveOptions.formatOptions = FormatOptions.STANDARDBASELINE        jpgSaveOptions.matte = MatteType.NONE        jpgSaveOptions.quality = 12        // 別ファイルに保存        jpgFile = new File ( OutputDir + "/" + wkFileName2[0] + "_L_" + resolution + "dpi_" + colorofbackgroud+ ".jpg" )        app.activeDocument.saveAs( jpgFile, jpgSaveOptions, true )        // 画像をクローズ        app.activeDocument.close( SaveOptions.DONOTSAVECHANGES )    } // for    alert( '処理終了しました 変換した画像ファイルは' + i + '枚です' )} //trycatch (e ){    alert(e);}//// 関数名：getImageSize// 目的　：画像の幅と高さを取得// 引数１(入力)：幅と高さの比(数値：32 or 43)// 引数２(出力)：配列// 復帰値：なし// 第２引数の配列wksizeの返却値// 　wksize[0] : L版の幅(127mm)// 　wksize[1] : L版の高さ(89mm)// 　wksize[2] : 比に応じた画像の幅// 　wksize[3] : 比に応じた画像の高さ//function getImageSize ( ratio, wksize ){    // サイズ定義    var L_w = new UnitValue( "127 mm" )    var L_h = new UnitValue( "89 mm" )    var image_size_L_32_w = new UnitValue( "117 mm" )    var image_size_L_32_h = new UnitValue( "78 mm" )    var image_size_L_43_w = new UnitValue( "104 mm" )    var image_size_L_43_h = new UnitValue( "78 mm" )    wksize[0]= L_w    wksize[1]= L_h    if ( ratio == 32 )    {        wksize[2]= image_size_L_32_w        wksize[3]= image_size_L_32_h    }    else if ( ratio == 43 )    {        wksize[2]= image_size_L_43_w        wksize[3]= image_size_L_43_h    }    // alert( 'getImageSize: ratio=' + ratio + ' wksize=' + wksize )}//// 関数名：getSelectOffset// 目的　：元画像を貼り付ける範囲のオフセットを取得// 引数１(入力)：幅と高さの比(数値：32 or 43)// 引数２(出力)：配列x// 引数３(出力)：配列y// 復帰値：なし// 第２引数の配列xの返却値// 　x[1] : 座標x1のオフセット// 　x[2] : 座標x2のオフセット// 第３引数の配列yの返却値// 　y[1] : 座標y1のオフセット// 　y[2] : 座標y2のオフセット//function getSelectOffset ( ratio, x, y ){    // 画像内オフセット定義    var x1_32 = new UnitValue( "5 mm" )    var x2_32 = new UnitValue( "122 mm" )    var y1_32 = new UnitValue( "5.5 mm" )    var y2_32 = new UnitValue( "83.5 mm" )    var x1_43 = new UnitValue( "11.5 mm" )    var x2_43 = new UnitValue( "115.5 mm" )    var y1_43 = new UnitValue( "5.5 mm" )    var y2_43 = new UnitValue( "83.5 mm" )    // alert( 'getSelectOffset: ratio=' + ratio + ' / x=' + x + ' / y=' + y )    if ( ratio == 32 )    {        x[1] = x1_32        // alert( x[1] )        x[1].convert('px')        // alert( x[1] )        x[2] = x2_32        x[2].convert('px')        y[1] = y1_32        y[1].convert('px')        y[2] = y2_32        y[2].convert('px')    }    else if ( ratio == 43 )    {        x[1] = x1_43        // alert( x[1] )        x[1].convert('px')        // alert( x[1] )        x[2] = x2_43        x[2].convert('px')        y[1] = y1_43        y[1].convert('px')        y[2] = y2_43        y[2].convert('px')    }    // alert( 'getSelectOffset: ratio=' + ratio + ' / x=' + x + ' / y=' + y )}//// 関数名：getImageRatio// 目的　：画像の幅と高さの比を取得// 引数１：画像の幅(数値)// 引数２：画像の高さ(数値)// 復帰値：32：幅：高さ＝３：２// 　　　：23：幅：高さ＝２：３// 　　　：43：幅：高さ＝４：３// 　　　：34：幅：高さ＝３：４// 　　　：11：幅：高さ＝１：１// 　　　：１：その他//function getImageRatio( w, h ){    if ( w > h )    {        //        // 幅＞高さの場合        //        if ( w/h > 1.6 )        {            r = 1        }        else        {            if ( w/h > 1.4 )            {                // 縦横比を3:2とみなす                r = 32            }            else            {                if ( w/h >1.2 )                {                    // 縦横比を4:3とみなす                    r = 43                }                else                {                        // 縦横比を1:1とみなす                        r = 11                }            }        }    }    else if ( w == h )    {        // 縦横比は1:1        r = 11    }    else    {        //        // 高さ＞幅の場合        //        if ( h/w > 1.6 )        {            r =1        }        else        {            if ( h/w > 1.4 )            {                // 縦横比を2:3とみなす                r = 23            }            else            {                if ( h/w > 1.2 )                {                    // 縦横比を3:4とみなす                    r = 34                }                else                {                    // 縦横比を1:1とみなす                    r = 11                }            }        }    }    return r;}